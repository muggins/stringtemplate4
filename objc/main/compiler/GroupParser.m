/** \file
 *  This OBJC source file was generated by $ANTLR version 3.4
 *
 *     -  From the grammar source file : /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g
 *     -                            On : 2013-08-19 08:20:58
 *     -                for the parser : GroupParserParser
 *
 * Editing it, at least manually, is not wise.
 *
 * ObjC language generator and runtime by Alan Condit, acondit|hereisanat|ipns|dotgoeshere|com.
 *
 *
*/
// $ANTLR 3.4 /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g 2013-08-19 08:20:58


/* -----------------------------------------
 * Include the ANTLR3 generated header file.
 */
#import "GroupParser.h"
/* ----------------------------------------- */


/* ============================================================================= */
/* =============================================================================
 * Start of recognizer
 */

#pragma mark Bitsets
static ANTLRBitSet *FOLLOW_oldStyleHeader_in_group123;
static const unsigned long long FOLLOW_oldStyleHeader_in_group123_data[] = { 0x0000000025000010LL};
static ANTLRBitSet *FOLLOW_delimiters_in_group134;
static const unsigned long long FOLLOW_delimiters_in_group134_data[] = { 0x0000000021000010LL};
static ANTLRBitSet *FOLLOW_29_in_group147;
static const unsigned long long FOLLOW_29_in_group147_data[] = { 0x0000000000000040LL};
static ANTLRBitSet *FOLLOW_STRING_in_group149;
static const unsigned long long FOLLOW_STRING_in_group149_data[] = { 0x0000000021000010LL};
static ANTLRBitSet *FOLLOW_29_in_group163;
static const unsigned long long FOLLOW_29_in_group163_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_group192;
static const unsigned long long FOLLOW_ID_in_group192_data[] = { 0x0000000021080010LL};
static ANTLRBitSet *FOLLOW_19_in_group195;
static const unsigned long long FOLLOW_19_in_group195_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_group197;
static const unsigned long long FOLLOW_ID_in_group197_data[] = { 0x0000000021080010LL};
static ANTLRBitSet *FOLLOW_def_in_group221;
static const unsigned long long FOLLOW_def_in_group221_data[] = { 0x0000000001000010LL};
static ANTLRBitSet *FOLLOW_EOF_in_group233;
static const unsigned long long FOLLOW_EOF_in_group233_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_27_in_oldStyleHeader253;
static const unsigned long long FOLLOW_27_in_oldStyleHeader253_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_oldStyleHeader255;
static const unsigned long long FOLLOW_ID_in_oldStyleHeader255_data[] = { 0x0000000010500000LL};
static ANTLRBitSet *FOLLOW_20_in_oldStyleHeader259;
static const unsigned long long FOLLOW_20_in_oldStyleHeader259_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_oldStyleHeader261;
static const unsigned long long FOLLOW_ID_in_oldStyleHeader261_data[] = { 0x0000000010400000LL};
static ANTLRBitSet *FOLLOW_28_in_oldStyleHeader276;
static const unsigned long long FOLLOW_28_in_oldStyleHeader276_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_oldStyleHeader278;
static const unsigned long long FOLLOW_ID_in_oldStyleHeader278_data[] = { 0x0000000000440000LL};
static ANTLRBitSet *FOLLOW_18_in_oldStyleHeader281;
static const unsigned long long FOLLOW_18_in_oldStyleHeader281_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_oldStyleHeader283;
static const unsigned long long FOLLOW_ID_in_oldStyleHeader283_data[] = { 0x0000000000440000LL};
static ANTLRBitSet *FOLLOW_22_in_oldStyleHeader298;
static const unsigned long long FOLLOW_22_in_oldStyleHeader298_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_groupName328;
static const unsigned long long FOLLOW_ID_in_groupName328_data[] = { 0x0000000000080002LL};
static ANTLRBitSet *FOLLOW_19_in_groupName333;
static const unsigned long long FOLLOW_19_in_groupName333_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_groupName337;
static const unsigned long long FOLLOW_ID_in_groupName337_data[] = { 0x0000000000080002LL};
static ANTLRBitSet *FOLLOW_26_in_delimiters358;
static const unsigned long long FOLLOW_26_in_delimiters358_data[] = { 0x0000000000000040LL};
static ANTLRBitSet *FOLLOW_STRING_in_delimiters362;
static const unsigned long long FOLLOW_STRING_in_delimiters362_data[] = { 0x0000000000040000LL};
static ANTLRBitSet *FOLLOW_18_in_delimiters364;
static const unsigned long long FOLLOW_18_in_delimiters364_data[] = { 0x0000000000000040LL};
static ANTLRBitSet *FOLLOW_STRING_in_delimiters368;
static const unsigned long long FOLLOW_STRING_in_delimiters368_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_templateDef_in_def392;
static const unsigned long long FOLLOW_templateDef_in_def392_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_dictDef_in_def397;
static const unsigned long long FOLLOW_dictDef_in_def397_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_24_in_templateDef431;
static const unsigned long long FOLLOW_24_in_templateDef431_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef435;
static const unsigned long long FOLLOW_ID_in_templateDef435_data[] = { 0x0000000000080000LL};
static ANTLRBitSet *FOLLOW_19_in_templateDef437;
static const unsigned long long FOLLOW_19_in_templateDef437_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef441;
static const unsigned long long FOLLOW_ID_in_templateDef441_data[] = { 0x0000000000010000LL};
static ANTLRBitSet *FOLLOW_LPAREN_in_templateDef443;
static const unsigned long long FOLLOW_LPAREN_in_templateDef443_data[] = { 0x0000000000020000LL};
static ANTLRBitSet *FOLLOW_RPAREN_in_templateDef445;
static const unsigned long long FOLLOW_RPAREN_in_templateDef445_data[] = { 0x0000000000200000LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef461;
static const unsigned long long FOLLOW_ID_in_templateDef461_data[] = { 0x0000000000010000LL};
static ANTLRBitSet *FOLLOW_LPAREN_in_templateDef463;
static const unsigned long long FOLLOW_LPAREN_in_templateDef463_data[] = { 0x0000000000020010LL};
static ANTLRBitSet *FOLLOW_formalArgs_in_templateDef465;
static const unsigned long long FOLLOW_formalArgs_in_templateDef465_data[] = { 0x0000000000020000LL};
static ANTLRBitSet *FOLLOW_RPAREN_in_templateDef467;
static const unsigned long long FOLLOW_RPAREN_in_templateDef467_data[] = { 0x0000000000200000LL};
static ANTLRBitSet *FOLLOW_21_in_templateDef487;
static const unsigned long long FOLLOW_21_in_templateDef487_data[] = { 0x0000000000000C42LL};
static ANTLRBitSet *FOLLOW_STRING_in_templateDef511;
static const unsigned long long FOLLOW_STRING_in_templateDef511_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_BIGSTRING_in_templateDef531;
static const unsigned long long FOLLOW_BIGSTRING_in_templateDef531_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_BIGSTRING_NO_NL_in_templateDef548;
static const unsigned long long FOLLOW_BIGSTRING_NO_NL_in_templateDef548_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef597;
static const unsigned long long FOLLOW_ID_in_templateDef597_data[] = { 0x0000000000200000LL};
static ANTLRBitSet *FOLLOW_21_in_templateDef599;
static const unsigned long long FOLLOW_21_in_templateDef599_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_ID_in_templateDef603;
static const unsigned long long FOLLOW_ID_in_templateDef603_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_formalArg_in_formalArgs637;
static const unsigned long long FOLLOW_formalArg_in_formalArgs637_data[] = { 0x0000000000040002LL};
static ANTLRBitSet *FOLLOW_18_in_formalArgs641;
static const unsigned long long FOLLOW_18_in_formalArgs641_data[] = { 0x0000000000000010LL};
static ANTLRBitSet *FOLLOW_formalArg_in_formalArgs643;
static const unsigned long long FOLLOW_formalArg_in_formalArgs643_data[] = { 0x0000000000040002LL};
static ANTLRBitSet *FOLLOW_ID_in_formalArg672;
static const unsigned long long FOLLOW_ID_in_formalArg672_data[] = { 0x0000000000800002LL};
static ANTLRBitSet *FOLLOW_23_in_formalArg686;
static const unsigned long long FOLLOW_23_in_formalArg686_data[] = { 0x00000000000030C0LL};
static ANTLRBitSet *FOLLOW_set_in_formalArg690;
static const unsigned long long FOLLOW_set_in_formalArg690_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_23_in_formalArg714;
static const unsigned long long FOLLOW_23_in_formalArg714_data[] = { 0x0000000000004000LL};
static ANTLRBitSet *FOLLOW_LBRACK_in_formalArg718;
static const unsigned long long FOLLOW_LBRACK_in_formalArg718_data[] = { 0x0000000000008000LL};
static ANTLRBitSet *FOLLOW_RBRACK_in_formalArg720;
static const unsigned long long FOLLOW_RBRACK_in_formalArg720_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_dictDef778;
static const unsigned long long FOLLOW_ID_in_dictDef778_data[] = { 0x0000000000200000LL};
static ANTLRBitSet *FOLLOW_21_in_dictDef780;
static const unsigned long long FOLLOW_21_in_dictDef780_data[] = { 0x0000000000004000LL};
static ANTLRBitSet *FOLLOW_dict_in_dictDef782;
static const unsigned long long FOLLOW_dict_in_dictDef782_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_LBRACK_in_dict820;
static const unsigned long long FOLLOW_LBRACK_in_dict820_data[] = { 0x0000000002000040LL};
static ANTLRBitSet *FOLLOW_dictPairs_in_dict822;
static const unsigned long long FOLLOW_dictPairs_in_dict822_data[] = { 0x0000000000008000LL};
static ANTLRBitSet *FOLLOW_RBRACK_in_dict825;
static const unsigned long long FOLLOW_RBRACK_in_dict825_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_keyValuePair_in_dictPairs845;
static const unsigned long long FOLLOW_keyValuePair_in_dictPairs845_data[] = { 0x0000000000040002LL};
static ANTLRBitSet *FOLLOW_18_in_dictPairs857;
static const unsigned long long FOLLOW_18_in_dictPairs857_data[] = { 0x0000000000000040LL};
static ANTLRBitSet *FOLLOW_keyValuePair_in_dictPairs859;
static const unsigned long long FOLLOW_keyValuePair_in_dictPairs859_data[] = { 0x0000000000040002LL};
static ANTLRBitSet *FOLLOW_18_in_dictPairs865;
static const unsigned long long FOLLOW_18_in_dictPairs865_data[] = { 0x0000000002000000LL};
static ANTLRBitSet *FOLLOW_defaultValuePair_in_dictPairs867;
static const unsigned long long FOLLOW_defaultValuePair_in_dictPairs867_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_defaultValuePair_in_dictPairs880;
static const unsigned long long FOLLOW_defaultValuePair_in_dictPairs880_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_25_in_defaultValuePair910;
static const unsigned long long FOLLOW_25_in_defaultValuePair910_data[] = { 0x0000000000100000LL};
static ANTLRBitSet *FOLLOW_20_in_defaultValuePair912;
static const unsigned long long FOLLOW_20_in_defaultValuePair912_data[] = { 0x0000000000007CD0LL};
static ANTLRBitSet *FOLLOW_keyValue_in_defaultValuePair914;
static const unsigned long long FOLLOW_keyValue_in_defaultValuePair914_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_STRING_in_keyValuePair936;
static const unsigned long long FOLLOW_STRING_in_keyValuePair936_data[] = { 0x0000000000100000LL};
static ANTLRBitSet *FOLLOW_20_in_keyValuePair938;
static const unsigned long long FOLLOW_20_in_keyValuePair938_data[] = { 0x0000000000007CD0LL};
static ANTLRBitSet *FOLLOW_keyValue_in_keyValuePair940;
static const unsigned long long FOLLOW_keyValue_in_keyValuePair940_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_BIGSTRING_in_keyValue965;
static const unsigned long long FOLLOW_BIGSTRING_in_keyValue965_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_BIGSTRING_NO_NL_in_keyValue987;
static const unsigned long long FOLLOW_BIGSTRING_NO_NL_in_keyValue987_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue1003;
static const unsigned long long FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue1003_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_STRING_in_keyValue1016;
static const unsigned long long FOLLOW_STRING_in_keyValue1016_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_T_FALSE_in_keyValue1041;
static const unsigned long long FOLLOW_T_FALSE_in_keyValue1041_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_T_TRUE_in_keyValue1065;
static const unsigned long long FOLLOW_T_TRUE_in_keyValue1065_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_LBRACK_in_keyValue1090;
static const unsigned long long FOLLOW_LBRACK_in_keyValue1090_data[] = { 0x0000000000008000LL};
static ANTLRBitSet *FOLLOW_RBRACK_in_keyValue1092;
static const unsigned long long FOLLOW_RBRACK_in_keyValue1092_data[] = { 0x0000000000000002LL};
static ANTLRBitSet *FOLLOW_ID_in_keyValue1134;
static const unsigned long long FOLLOW_ID_in_keyValue1134_data[] = { 0x0000000000000002LL};


#pragma mark Dynamic Global globalAttributeScopeImplementation

#pragma mark Dynamic Rule Scopes ruleAttributeScopeImplementation
@implementation formalArgs_Scope  /* start of ruleAttributeScopeImplementation */
@synthesize hasOptionalParameter; 

+ (formalArgs_Scope *)newformalArgs_Scope
{
return [[formalArgs_Scope alloc] init];
}

- (id) init
{
self = [super init];
return self;
}

/* start of formalArgs_Scope get and set functions */
- (BOOL)gethasOptionalParameter { return( hasOptionalParameter ); }
- (void)sethasOptionalParameter:(BOOL)aVal { hasOptionalParameter = aVal; }

/* End of formalArgs_Scope get and set functions */
@end /* end of ruleAttributeScopeImplementation */



#pragma mark Rule Return Scopes returnScopeImplementation

@implementation GroupParser  // line 637

#pragma mark global Attribute Scopes globalAttributeScope
/* ObjC start globalAttributeScope */
/* ObjC end globalAttributeScope */
/* ObjC start actions.(actionScope).synthesize */

@synthesize group;

/* ObjC start of actions.(actionScope).properties */

static SymbolStack *formalArgs_stack;
static formalArgs_Scope *formalArgs_scope;

/* ObjC start synthesize() */

+ (void) initialize
{
    #pragma mark Bitsets
    FOLLOW_oldStyleHeader_in_group123 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_oldStyleHeader_in_group123_data Count:(NSUInteger)1];
    FOLLOW_delimiters_in_group134 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_delimiters_in_group134_data Count:(NSUInteger)1];
    FOLLOW_29_in_group147 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_29_in_group147_data Count:(NSUInteger)1];
    FOLLOW_STRING_in_group149 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_group149_data Count:(NSUInteger)1];
    FOLLOW_29_in_group163 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_29_in_group163_data Count:(NSUInteger)1];
    FOLLOW_ID_in_group192 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_group192_data Count:(NSUInteger)1];
    FOLLOW_19_in_group195 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_group195_data Count:(NSUInteger)1];
    FOLLOW_ID_in_group197 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_group197_data Count:(NSUInteger)1];
    FOLLOW_def_in_group221 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_def_in_group221_data Count:(NSUInteger)1];
    FOLLOW_EOF_in_group233 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_EOF_in_group233_data Count:(NSUInteger)1];
    FOLLOW_27_in_oldStyleHeader253 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_27_in_oldStyleHeader253_data Count:(NSUInteger)1];
    FOLLOW_ID_in_oldStyleHeader255 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_oldStyleHeader255_data Count:(NSUInteger)1];
    FOLLOW_20_in_oldStyleHeader259 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_20_in_oldStyleHeader259_data Count:(NSUInteger)1];
    FOLLOW_ID_in_oldStyleHeader261 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_oldStyleHeader261_data Count:(NSUInteger)1];
    FOLLOW_28_in_oldStyleHeader276 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_28_in_oldStyleHeader276_data Count:(NSUInteger)1];
    FOLLOW_ID_in_oldStyleHeader278 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_oldStyleHeader278_data Count:(NSUInteger)1];
    FOLLOW_18_in_oldStyleHeader281 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_18_in_oldStyleHeader281_data Count:(NSUInteger)1];
    FOLLOW_ID_in_oldStyleHeader283 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_oldStyleHeader283_data Count:(NSUInteger)1];
    FOLLOW_22_in_oldStyleHeader298 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_22_in_oldStyleHeader298_data Count:(NSUInteger)1];
    FOLLOW_ID_in_groupName328 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_groupName328_data Count:(NSUInteger)1];
    FOLLOW_19_in_groupName333 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_groupName333_data Count:(NSUInteger)1];
    FOLLOW_ID_in_groupName337 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_groupName337_data Count:(NSUInteger)1];
    FOLLOW_26_in_delimiters358 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_26_in_delimiters358_data Count:(NSUInteger)1];
    FOLLOW_STRING_in_delimiters362 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_delimiters362_data Count:(NSUInteger)1];
    FOLLOW_18_in_delimiters364 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_18_in_delimiters364_data Count:(NSUInteger)1];
    FOLLOW_STRING_in_delimiters368 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_delimiters368_data Count:(NSUInteger)1];
    FOLLOW_templateDef_in_def392 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_templateDef_in_def392_data Count:(NSUInteger)1];
    FOLLOW_dictDef_in_def397 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_dictDef_in_def397_data Count:(NSUInteger)1];
    FOLLOW_24_in_templateDef431 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_24_in_templateDef431_data Count:(NSUInteger)1];
    FOLLOW_ID_in_templateDef435 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef435_data Count:(NSUInteger)1];
    FOLLOW_19_in_templateDef437 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_19_in_templateDef437_data Count:(NSUInteger)1];
    FOLLOW_ID_in_templateDef441 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef441_data Count:(NSUInteger)1];
    FOLLOW_LPAREN_in_templateDef443 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_LPAREN_in_templateDef443_data Count:(NSUInteger)1];
    FOLLOW_RPAREN_in_templateDef445 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_RPAREN_in_templateDef445_data Count:(NSUInteger)1];
    FOLLOW_ID_in_templateDef461 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef461_data Count:(NSUInteger)1];
    FOLLOW_LPAREN_in_templateDef463 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_LPAREN_in_templateDef463_data Count:(NSUInteger)1];
    FOLLOW_formalArgs_in_templateDef465 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_formalArgs_in_templateDef465_data Count:(NSUInteger)1];
    FOLLOW_RPAREN_in_templateDef467 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_RPAREN_in_templateDef467_data Count:(NSUInteger)1];
    FOLLOW_21_in_templateDef487 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_21_in_templateDef487_data Count:(NSUInteger)1];
    FOLLOW_STRING_in_templateDef511 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_templateDef511_data Count:(NSUInteger)1];
    FOLLOW_BIGSTRING_in_templateDef531 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_BIGSTRING_in_templateDef531_data Count:(NSUInteger)1];
    FOLLOW_BIGSTRING_NO_NL_in_templateDef548 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_BIGSTRING_NO_NL_in_templateDef548_data Count:(NSUInteger)1];
    FOLLOW_ID_in_templateDef597 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef597_data Count:(NSUInteger)1];
    FOLLOW_21_in_templateDef599 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_21_in_templateDef599_data Count:(NSUInteger)1];
    FOLLOW_ID_in_templateDef603 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_templateDef603_data Count:(NSUInteger)1];
    FOLLOW_formalArg_in_formalArgs637 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_formalArg_in_formalArgs637_data Count:(NSUInteger)1];
    FOLLOW_18_in_formalArgs641 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_18_in_formalArgs641_data Count:(NSUInteger)1];
    FOLLOW_formalArg_in_formalArgs643 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_formalArg_in_formalArgs643_data Count:(NSUInteger)1];
    FOLLOW_ID_in_formalArg672 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_formalArg672_data Count:(NSUInteger)1];
    FOLLOW_23_in_formalArg686 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_23_in_formalArg686_data Count:(NSUInteger)1];
    FOLLOW_set_in_formalArg690 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_set_in_formalArg690_data Count:(NSUInteger)1];
    FOLLOW_23_in_formalArg714 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_23_in_formalArg714_data Count:(NSUInteger)1];
    FOLLOW_LBRACK_in_formalArg718 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_LBRACK_in_formalArg718_data Count:(NSUInteger)1];
    FOLLOW_RBRACK_in_formalArg720 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_RBRACK_in_formalArg720_data Count:(NSUInteger)1];
    FOLLOW_ID_in_dictDef778 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_dictDef778_data Count:(NSUInteger)1];
    FOLLOW_21_in_dictDef780 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_21_in_dictDef780_data Count:(NSUInteger)1];
    FOLLOW_dict_in_dictDef782 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_dict_in_dictDef782_data Count:(NSUInteger)1];
    FOLLOW_LBRACK_in_dict820 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_LBRACK_in_dict820_data Count:(NSUInteger)1];
    FOLLOW_dictPairs_in_dict822 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_dictPairs_in_dict822_data Count:(NSUInteger)1];
    FOLLOW_RBRACK_in_dict825 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_RBRACK_in_dict825_data Count:(NSUInteger)1];
    FOLLOW_keyValuePair_in_dictPairs845 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_keyValuePair_in_dictPairs845_data Count:(NSUInteger)1];
    FOLLOW_18_in_dictPairs857 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_18_in_dictPairs857_data Count:(NSUInteger)1];
    FOLLOW_keyValuePair_in_dictPairs859 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_keyValuePair_in_dictPairs859_data Count:(NSUInteger)1];
    FOLLOW_18_in_dictPairs865 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_18_in_dictPairs865_data Count:(NSUInteger)1];
    FOLLOW_defaultValuePair_in_dictPairs867 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_defaultValuePair_in_dictPairs867_data Count:(NSUInteger)1];
    FOLLOW_defaultValuePair_in_dictPairs880 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_defaultValuePair_in_dictPairs880_data Count:(NSUInteger)1];
    FOLLOW_25_in_defaultValuePair910 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_25_in_defaultValuePair910_data Count:(NSUInteger)1];
    FOLLOW_20_in_defaultValuePair912 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_20_in_defaultValuePair912_data Count:(NSUInteger)1];
    FOLLOW_keyValue_in_defaultValuePair914 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_keyValue_in_defaultValuePair914_data Count:(NSUInteger)1];
    FOLLOW_STRING_in_keyValuePair936 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_keyValuePair936_data Count:(NSUInteger)1];
    FOLLOW_20_in_keyValuePair938 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_20_in_keyValuePair938_data Count:(NSUInteger)1];
    FOLLOW_keyValue_in_keyValuePair940 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_keyValue_in_keyValuePair940_data Count:(NSUInteger)1];
    FOLLOW_BIGSTRING_in_keyValue965 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_BIGSTRING_in_keyValue965_data Count:(NSUInteger)1];
    FOLLOW_BIGSTRING_NO_NL_in_keyValue987 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_BIGSTRING_NO_NL_in_keyValue987_data Count:(NSUInteger)1];
    FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue1003 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue1003_data Count:(NSUInteger)1];
    FOLLOW_STRING_in_keyValue1016 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_STRING_in_keyValue1016_data Count:(NSUInteger)1];
    FOLLOW_T_FALSE_in_keyValue1041 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_T_FALSE_in_keyValue1041_data Count:(NSUInteger)1];
    FOLLOW_T_TRUE_in_keyValue1065 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_T_TRUE_in_keyValue1065_data Count:(NSUInteger)1];
    FOLLOW_LBRACK_in_keyValue1090 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_LBRACK_in_keyValue1090_data Count:(NSUInteger)1];
    FOLLOW_RBRACK_in_keyValue1092 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_RBRACK_in_keyValue1092_data Count:(NSUInteger)1];
    FOLLOW_ID_in_keyValue1134 = [ANTLRBitSet newBitSetWithBits:(const unsigned long long *)FOLLOW_ID_in_keyValue1134_data Count:(NSUInteger)1];

    [BaseRecognizer setTokenNames:[AMutableArray arrayWithObjects:@"<invalid>", @"<EOR>", @"<DOWN>", @"<UP>", 
 @"ID", @"WS", @"STRING", @"ANONYMOUS_TEMPLATE", @"COMMENT", @"LINE_COMMENT", 
 @"BIGSTRING", @"BIGSTRING_NO_NL", @"T_FALSE", @"T_TRUE", @"LBRACK", @"RBRACK", 
 @"LPAREN", @"RPAREN", @"','", @"'.'", @"':'", @"'::='", @"';'", @"'='", 
 @"'@'", @"'default'", @"'delimiters'", @"'group'", @"'implements'", @"'import'", nil]];
    [BaseRecognizer setGrammarFileName:@"/Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g"];
}

+ (GroupParser *)newGroupParser:(id<TokenStream>)aStream
{
    return [[GroupParser alloc] initWithTokenStream:aStream];
}

- (id) initWithTokenStream:(id<TokenStream>)aStream
{
    self = [super initWithTokenStream:aStream State:[RecognizerSharedState newRecognizerSharedStateWithRuleLen:14+1]];
    if ( self != nil ) {
        /* ruleAttributeScopeInit */
        formalArgs_scope = [formalArgs_Scope newformalArgs_Scope];
        formalArgs_stack = [SymbolStack newSymbolStackWithLen:30];

        /* start of actions-actionScope-init */
        /* start of init */
    }
    return self;
}

- (void) dealloc
{
    // [super dealloc];
}

/* ObjC start actions.(actionScope).methods */

+ (NSInteger) TANONYMOUS_TEMPLATE { return ANONYMOUS_TEMPLATE; }
+ (NSInteger) TBIGSTRING { return BIGSTRING; }
+ (NSInteger) TBIGSTRING_NO_NL { return BIGSTRING_NO_NL; }
+ (NSInteger) TID { return ID; }
+ (NSInteger) TFALSE { return T_FALSE; }
+ (NSInteger) TTRUE { return T_TRUE; }
+ (NSInteger) TLBRACK { return LBRACK; }
+ (NSInteger) TRBRACK { return RBRACK; }

- (void) displayRecognitionError:(AMutableArray *) tokenNames Exception:(RecognitionException *)e
{
    NSString *msg = [self getErrorMessage:e TokenNames:[self getTokenNames]];
    [group.errMgr groupSyntaxError:SYNTAX_ERROR srcName:[self getSourceName] e:e msg:msg];
}

- (NSString *) getSourceName
{
#ifdef DONTUSENOMO
    NSError **outError;
    NSString *fullFileName = [super getSourceName];
    NSFileWrapper *f = [[NSFileWrapper alloc] initWithURL:fullFileName options:NSFileWrapperReadingImmediate error:outError]; // strip to simple name
    return [f filename];
#endif
    return [Misc getFileName:[group getFileName]];
}

- (void) error:(NSString *)msg
{
    NoViableAltException *nvae = [NoViableAltException newException:0 state:0 stream:input];
    [group.errMgr groupSyntaxError:SYNTAX_ERROR srcName:[self getSourceName] e:nvae msg:msg];
    [self recover:input Exception:nil];
}

/*
- (NSString *) getErrorMessage:(RecognitionException *)e TokenNames:(AMutableArray *)TokenNames
{
    return [NSString stringWithFormat:@"%@--%@", e.name, e.reason];
}
*/


/* ObjC end actions.(actionScope).methods */
/* ObjC start methods() */
/* ObjC end methods() */
/* ObjC start rules */
/*
 * $ANTLR start group
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:227:1: group[STGroup *aGroup, NSString *prefix] : ( oldStyleHeader )? ( delimiters )? ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )* EOF ;
 */
- (void) group:(STGroup *)aGroup prefix:(NSString *)prefix 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */


    GroupLexer *lexer = (GroupLexer *)[input getTokenSource];
    self.group = lexer.group = aGroup;

    @try {
        /* ruleLabelDefs entry */
        CommonToken *STRING1 = nil;




        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:232:5: ( ( oldStyleHeader )? ( delimiters )? ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )* EOF ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:232:9: ( oldStyleHeader )? ( delimiters )? ( 'import' STRING | 'import' ID ( '.' ID )* )* ( def[prefix] )* EOF // alt
        {

        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:232:9: ( oldStyleHeader )? // block
        NSInteger alt1=2;
        NSInteger LA1_0 = [input LA:1];

        if ( (LA1_0==27) ) {
            alt1=1;
        }
        switch (alt1) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:232:9: oldStyleHeader // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_oldStyleHeader_in_group123];
                [self oldStyleHeader];

                [self popFollow];


                 
                }
                break;

        }

         
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:233:9: ( delimiters )? // block
        NSInteger alt2=2;
        NSInteger LA2_0 = [input LA:1];

        if ( (LA2_0==26) ) {
            alt2=1;
        }
        switch (alt2) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:233:9: delimiters // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_delimiters_in_group134];
                [self delimiters];

                [self popFollow];


                 
                }
                break;

        }

         

        do {
            NSInteger alt4=3;
            NSInteger LA4_0 = [input LA:1];
            if ( (LA4_0==29) ) {
                NSInteger LA4_2 = [input LA:2];
                if ( (LA4_2==STRING) ) {
                    alt4=1;
                }
                else if ( (LA4_2==ID) ) {
                    alt4=2;
                }


            }


            switch (alt4) {
                case 1 : ;
                    // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:234:11: 'import' STRING // alt
                    {

                    [self match:input TokenType:29 Follow:FOLLOW_29_in_group147]; 
                     
                    STRING1=(CommonToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_group149]; 
                     

                    [aGroup importTemplatesWithFileName:STRING1];

                     
                    }
                    break;
                case 2 : ;
                    // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:235:11: 'import' ID ( '.' ID )* // alt
                    {

                    [self match:input TokenType:29 Follow:FOLLOW_29_in_group163]; 
                     


                                MismatchedTokenException *mte = [MismatchedTokenException newException:STRING Stream:input];
                                [self reportError:mte];
                                

                     
                    [self match:input TokenType:ID Follow:FOLLOW_ID_in_group192]; 
                     

                    do {
                        NSInteger alt3=2;
                        NSInteger LA3_0 = [input LA:1];
                        if ( (LA3_0==19) ) {
                            alt3=1;
                        }


                        switch (alt3) {
                            case 1 : ;
                                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:240:17: '.' ID // alt
                                {

                                [self match:input TokenType:19 Follow:FOLLOW_19_in_group195]; 
                                 
                                [self match:input TokenType:ID Follow:FOLLOW_ID_in_group197]; 
                                 
                                }
                                break;

                            default :
                                goto loop3;
                        }
                    } while (YES);
                    loop3: ;

                     
                    }
                    break;

                default :
                    goto loop4;
            }
        } while (YES);
        loop4: ;

         

        do {
            NSInteger alt5=2;
            NSInteger LA5_0 = [input LA:1];
            if ( (LA5_0==ID||LA5_0==24) ) {
                alt5=1;
            }


            switch (alt5) {
                case 1 : ;
                    // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:242:9: def[prefix] // alt
                    {

                    /* ruleRef */
                    [self pushFollow:FOLLOW_def_in_group221];
                    [self def:prefix ];

                    [self popFollow];


                     
                    }
                    break;

                default :
                    goto loop5;
            }
        } while (YES);
        loop5: ;

         
        [self match:input TokenType:EOF Follow:FOLLOW_EOF_in_group233]; 
         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end group */

/*
 * $ANTLR start oldStyleHeader
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:246:1: oldStyleHeader : 'group' ID ( ':' ID )? ( 'implements' ID ( ',' ID )* )? ';' ;
 */
- (void) oldStyleHeader
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */





        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:247:5: ( 'group' ID ( ':' ID )? ( 'implements' ID ( ',' ID )* )? ';' ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:247:9: 'group' ID ( ':' ID )? ( 'implements' ID ( ',' ID )* )? ';' // alt
        {

        [self match:input TokenType:27 Follow:FOLLOW_27_in_oldStyleHeader253]; 
         
        [self match:input TokenType:ID Follow:FOLLOW_ID_in_oldStyleHeader255]; 
         
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:247:20: ( ':' ID )? // block
        NSInteger alt6=2;
        NSInteger LA6_0 = [input LA:1];

        if ( (LA6_0==20) ) {
            alt6=1;
        }
        switch (alt6) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:247:22: ':' ID // alt
                {

                [self match:input TokenType:20 Follow:FOLLOW_20_in_oldStyleHeader259]; 
                 
                [self match:input TokenType:ID Follow:FOLLOW_ID_in_oldStyleHeader261]; 
                 
                }
                break;

        }

         
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:248:9: ( 'implements' ID ( ',' ID )* )? // block
        NSInteger alt8=2;
        NSInteger LA8_0 = [input LA:1];

        if ( (LA8_0==28) ) {
            alt8=1;
        }
        switch (alt8) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:248:11: 'implements' ID ( ',' ID )* // alt
                {

                [self match:input TokenType:28 Follow:FOLLOW_28_in_oldStyleHeader276]; 
                 
                [self match:input TokenType:ID Follow:FOLLOW_ID_in_oldStyleHeader278]; 
                 

                do {
                    NSInteger alt7=2;
                    NSInteger LA7_0 = [input LA:1];
                    if ( (LA7_0==18) ) {
                        alt7=1;
                    }


                    switch (alt7) {
                        case 1 : ;
                            // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:248:28: ',' ID // alt
                            {

                            [self match:input TokenType:18 Follow:FOLLOW_18_in_oldStyleHeader281]; 
                             
                            [self match:input TokenType:ID Follow:FOLLOW_ID_in_oldStyleHeader283]; 
                             
                            }
                            break;

                        default :
                            goto loop7;
                    }
                } while (YES);
                loop7: ;

                 
                }
                break;

        }

         
        [self match:input TokenType:22 Follow:FOLLOW_22_in_oldStyleHeader298]; 
         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end oldStyleHeader */

/*
 * $ANTLR start groupName
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:252:1: groupName returns [NSString *name] : a= ID ( '.' a= ID )* ;
 */
- (NSString *) groupName
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    NSString * name = nil ;


    NSMutableString *buf = [NSMutableString stringWithCapacity:16];
    @try {
        /* ruleLabelDefs entry */
        CommonToken *a = nil;




        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:254:5: (a= ID ( '.' a= ID )* ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:254:9: a= ID ( '.' a= ID )* // alt
        {

        a=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_groupName328]; 
         

        [buf appendString:(a!=nil?a.text:nil)];

         

        do {
            NSInteger alt9=2;
            NSInteger LA9_0 = [input LA:1];
            if ( (LA9_0==19) ) {
                alt9=1;
            }


            switch (alt9) {
                case 1 : ;
                    // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:254:45: '.' a= ID // alt
                    {

                    [self match:input TokenType:19 Follow:FOLLOW_19_in_groupName333]; 
                     
                    a=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_groupName337]; 
                     

                    [buf appendString:(a!=nil?a.text:nil)];

                     
                    }
                    break;

                default :
                    goto loop9;
            }
        } while (YES);
        loop9: ;

         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return name;
}
/* $ANTLR end groupName */

/*
 * $ANTLR start delimiters
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:257:1: delimiters : 'delimiters' a= STRING ',' b= STRING ;
 */
- (void) delimiters
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */
        CommonToken *a = nil;
        CommonToken *b = nil;




        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:258:5: ( 'delimiters' a= STRING ',' b= STRING ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:258:7: 'delimiters' a= STRING ',' b= STRING // alt
        {

        [self match:input TokenType:26 Follow:FOLLOW_26_in_delimiters358]; 
         
        a=(CommonToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_delimiters362]; 
         
        [self match:input TokenType:18 Follow:FOLLOW_18_in_delimiters364]; 
         
        b=(CommonToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_delimiters368]; 
         


             	group.delimiterStartChar=[(a!=nil?a.text:nil) characterAtIndex:0];
                group.delimiterStopChar=[(b!=nil?b.text:nil) characterAtIndex:0];
                

         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end delimiters */

/*
 * $ANTLR start def
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:269:1: def[NSString *prefix] : ( templateDef[prefix] | dictDef );
 */
- (void) def:(NSString *)prefix 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */





        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:269:23: ( templateDef[prefix] | dictDef ) //ruleblock
        NSInteger alt10=2;
        NSInteger LA10_0 = [input LA:1];

        if ( (LA10_0==24) ) {
            alt10=1;
        }
        else if ( (LA10_0==ID) ) {
            NSInteger LA10_2 = [input LA:2];

            if ( (LA10_2==LPAREN) ) {
                alt10=1;
            }
            else if ( (LA10_2==21) ) {
                NSInteger LA10_3 = [input LA:3];

                if ( (LA10_3==ID) ) {
                    alt10=1;
                }
                else if ( (LA10_3==LBRACK) ) {
                    alt10=2;
                }
                else {
                    NoViableAltException *nvae = [NoViableAltException newException:10 state:3 stream:input];
                    nvae.c = LA10_3;
                    @throw nvae;

                }
            }
            else {
                NoViableAltException *nvae = [NoViableAltException newException:10 state:2 stream:input];
                nvae.c = LA10_2;
                @throw nvae;

            }
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:10 state:0 stream:input];
            nvae.c = LA10_0;
            @throw nvae;

        }
        switch (alt10) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:269:25: templateDef[prefix] // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_templateDef_in_def392];
                [self templateDef:prefix ];

                [self popFollow];


                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:269:47: dictDef // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_dictDef_in_def397];
                [self dictDef];

                [self popFollow];


                 
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {

                // pretend we already saw an error here
                state.lastErrorIndex = input.index;
                [self error:[NSString stringWithFormat:@"garbled template definition starting at '%@'", [[input LT:1] text]]];
            
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end def */

/*
 * $ANTLR start templateDef
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:276:1: templateDef[NSString *prefix] : ( ( '@' enclosing= ID '.' name= ID LPAREN RPAREN |name= ID LPAREN formalArgs RPAREN ) '::=' ( STRING | BIGSTRING | BIGSTRING_NO_NL |) |alias= ID '::=' target= ID );
 */
- (void) templateDef:(NSString *)prefix 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */


        NSString *template=nil;
        NSInteger n=0; // num char to strip from left, right of template def

    @try {
        /* ruleLabelDefs entry */
        CommonToken *enclosing = nil;
        CommonToken *name = nil;
        CommonToken *alias = nil;
        CommonToken *target = nil;
        CommonToken *STRING2 = nil;
        CommonToken *BIGSTRING3 = nil;
        CommonToken *BIGSTRING_NO_NL4 = nil;

        AMutableArray * formalArgs5 = nil ;



        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:281:5: ( ( '@' enclosing= ID '.' name= ID LPAREN RPAREN |name= ID LPAREN formalArgs RPAREN ) '::=' ( STRING | BIGSTRING | BIGSTRING_NO_NL |) |alias= ID '::=' target= ID ) //ruleblock
        NSInteger alt13=2;
        NSInteger LA13_0 = [input LA:1];

        if ( (LA13_0==24) ) {
            alt13=1;
        }
        else if ( (LA13_0==ID) ) {
            NSInteger LA13_2 = [input LA:2];

            if ( (LA13_2==LPAREN) ) {
                alt13=1;
            }
            else if ( (LA13_2==21) ) {
                alt13=2;
            }
            else {
                NoViableAltException *nvae = [NoViableAltException newException:13 state:2 stream:input];
                nvae.c = LA13_2;
                @throw nvae;

            }
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:13 state:0 stream:input];
            nvae.c = LA13_0;
            @throw nvae;

        }
        switch (alt13) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:281:9: ( '@' enclosing= ID '.' name= ID LPAREN RPAREN |name= ID LPAREN formalArgs RPAREN ) '::=' ( STRING | BIGSTRING | BIGSTRING_NO_NL |) // alt
                {

                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:281:9: ( '@' enclosing= ID '.' name= ID LPAREN RPAREN |name= ID LPAREN formalArgs RPAREN ) // block
                NSInteger alt11=2;
                NSInteger LA11_0 = [input LA:1];

                if ( (LA11_0==24) ) {
                    alt11=1;
                }
                else if ( (LA11_0==ID) ) {
                    alt11=2;
                }
                else {
                    NoViableAltException *nvae = [NoViableAltException newException:11 state:0 stream:input];
                    nvae.c = LA11_0;
                    @throw nvae;

                }
                switch (alt11) {
                    case 1 : ;
                        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:281:13: '@' enclosing= ID '.' name= ID LPAREN RPAREN // alt
                        {

                        [self match:input TokenType:24 Follow:FOLLOW_24_in_templateDef431]; 
                         
                        enclosing=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef435]; 
                         
                        [self match:input TokenType:19 Follow:FOLLOW_19_in_templateDef437]; 
                         
                        name=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef441]; 
                         
                        [self match:input TokenType:LPAREN Follow:FOLLOW_LPAREN_in_templateDef443]; 
                         
                        [self match:input TokenType:RPAREN Follow:FOLLOW_RPAREN_in_templateDef445]; 
                         
                        }
                        break;
                    case 2 : ;
                        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:282:13: name= ID LPAREN formalArgs RPAREN // alt
                        {

                        name=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef461]; 
                         
                        [self match:input TokenType:LPAREN Follow:FOLLOW_LPAREN_in_templateDef463]; 
                         
                        /* ruleRef */
                        [self pushFollow:FOLLOW_formalArgs_in_templateDef465];
                        formalArgs5 = [self formalArgs];

                        [self popFollow];


                         
                        [self match:input TokenType:RPAREN Follow:FOLLOW_RPAREN_in_templateDef467]; 
                         
                        }
                        break;

                }

                 
                [self match:input TokenType:21 Follow:FOLLOW_21_in_templateDef487]; 
                 

                CommonToken *templateToken = [input LT:1];

                 
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:286:9: ( STRING | BIGSTRING | BIGSTRING_NO_NL |) // block
                NSInteger alt12=4;
                unichar charLA12 = [input LA:1];
                switch (charLA12) {
                    case STRING: ;
                        {
                        alt12=1;
                        }
                        break;
                    case BIGSTRING: ;
                        {
                        alt12=2;
                        }
                        break;
                    case BIGSTRING_NO_NL: ;
                        {
                        alt12=3;
                        }
                        break;
                    case 65535: ;
                    case ID: ;
                    case 24: ;
                        {
                        alt12=4;
                        }
                        break;

                default: ;
                    NoViableAltException *nvae = [NoViableAltException newException:12 state:0 stream:input];
                    nvae.c = charLA12;
                    @throw nvae;

                }

                switch (alt12) {
                    case 1 : ;
                        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:286:13: STRING // alt
                        {

                        STRING2=(CommonToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_templateDef511]; 
                         

                        template=(STRING2!=nil?STRING2.text:nil); n=1;

                         
                        }
                        break;
                    case 2 : ;
                        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:287:13: BIGSTRING // alt
                        {

                        BIGSTRING3=(CommonToken *)[self match:input TokenType:BIGSTRING Follow:FOLLOW_BIGSTRING_in_templateDef531]; 
                         

                        template=(BIGSTRING3!=nil?BIGSTRING3.text:nil); n=2;

                         
                        }
                        break;
                    case 3 : ;
                        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:288:13: BIGSTRING_NO_NL // alt
                        {

                        BIGSTRING_NO_NL4=(CommonToken *)[self match:input TokenType:BIGSTRING_NO_NL Follow:FOLLOW_BIGSTRING_NO_NL_in_templateDef548]; 
                         

                        template=(BIGSTRING_NO_NL4!=nil?BIGSTRING_NO_NL4.text:nil); n=2;

                         
                        }
                        break;
                    case 4 : ;
                        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:289:13:  // alt
                        {



                        template = @"";
                        NSString *msg = [NSString stringWithFormat:@"missing template at '%@'", [[input LT:1] text]];
                        NoViableAltException *e = [NoViableAltException newException:0 state:0 stream:input];
                        [group.errMgr groupSyntaxError:SYNTAX_ERROR srcName:[self getSourceName] e:e msg:msg];
                            

                         
                        }
                        break;

                }

                 


                        if ( (name!=nil?[name getTokenIndex]:0) >= 0 ) { // if ID missing
                            template = [Misc strip:template n:n];
                            NSString *templateName = (name!=nil?name.text:nil);
                            if ( [prefix length] > 0 ) templateName = [NSString stringWithFormat: @"%@%@", prefix, (name!=nil?name.text:nil)];
                            NSString *enclosingTemplateName = (enclosing!=nil?enclosing.text:nil);
                            if ( enclosingTemplateName != nil && ([enclosingTemplateName length] > 0) && ([prefix length] > 0) ) {
                                enclosingTemplateName = [NSString stringWithFormat:@"%@%@", prefix, enclosingTemplateName];
                            }
                            [group defineTemplateOrRegion:templateName
                            regionSurroundingTemplateName:enclosingTemplateName
                                            templateToken:templateToken
                                                 template:template
                                                nameToken:name
                                                     args:formalArgs5];
                        }
                        

                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:313:9: alias= ID '::=' target= ID // alt
                {

                alias=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef597]; 
                 
                [self match:input TokenType:21 Follow:FOLLOW_21_in_templateDef599]; 
                 
                target=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_templateDef603]; 
                 

                [group defineTemplateAlias:alias targetT:target];

                 
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end templateDef */

/*
 * $ANTLR start formalArgs
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:316:1: formalArgs returns [AMutableArray *args = [AMutableArray arrayWithCapacity:5]] : ( formalArg[$args] ( ',' formalArg[$args] )* |);
 */
- (AMutableArray *) formalArgs
{
    /* ruleScopeSetUp */
    [formalArgs_stack push:[formalArgs_Scope newformalArgs_Scope]];
    /* ruleDeclarations */
    AMutableArray * args =  [AMutableArray arrayWithCapacity:5];


     /* scopeSetAttributeRef */((formalArgs_Scope *)[formalArgs_stack peek]).hasOptionalParameter =  NO;
    @try {
        /* ruleLabelDefs entry */





        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:321:5: ( formalArg[$args] ( ',' formalArg[$args] )* |) //ruleblock
        NSInteger alt15=2;
        NSInteger LA15_0 = [input LA:1];

        if ( (LA15_0==ID) ) {
            alt15=1;
        }
        else if ( (LA15_0==RPAREN) ) {
            alt15=2;
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:15 state:0 stream:input];
            nvae.c = LA15_0;
            @throw nvae;

        }
        switch (alt15) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:321:9: formalArg[$args] ( ',' formalArg[$args] )* // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_formalArg_in_formalArgs637];
                [self formalArg:args ];

                [self popFollow];


                 

                do {
                    NSInteger alt14=2;
                    NSInteger LA14_0 = [input LA:1];
                    if ( (LA14_0==18) ) {
                        alt14=1;
                    }


                    switch (alt14) {
                        case 1 : ;
                            // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:321:27: ',' formalArg[$args] // alt
                            {

                            [self match:input TokenType:18 Follow:FOLLOW_18_in_formalArgs641]; 
                             
                            /* ruleRef */
                            [self pushFollow:FOLLOW_formalArg_in_formalArgs643];
                            [self formalArg:args ];

                            [self popFollow];


                             
                            }
                            break;

                        default :
                            goto loop14;
                    }
                } while (YES);
                loop14: ;

                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:323:5:  // alt
                {
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */
        [formalArgs_stack pop];
    }
    return args;
}
/* $ANTLR end formalArgs */

/*
 * $ANTLR start formalArg
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:325:1: formalArg[AMutableArray *args] : ID ( '=' a= ( STRING | ANONYMOUS_TEMPLATE | T_TRUE | T_FALSE ) | '=' a= LBRACK RBRACK |) ;
 */
- (void) formalArg:(AMutableArray *)args 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */
        CommonToken *a = nil;
        CommonToken *ID6 = nil;




        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:326:5: ( ID ( '=' a= ( STRING | ANONYMOUS_TEMPLATE | T_TRUE | T_FALSE ) | '=' a= LBRACK RBRACK |) ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:326:9: ID ( '=' a= ( STRING | ANONYMOUS_TEMPLATE | T_TRUE | T_FALSE ) | '=' a= LBRACK RBRACK |) // alt
        {

        ID6=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_formalArg672]; 
         
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:327:9: ( '=' a= ( STRING | ANONYMOUS_TEMPLATE | T_TRUE | T_FALSE ) | '=' a= LBRACK RBRACK |) // block
        NSInteger alt16=3;
        NSInteger LA16_0 = [input LA:1];

        if ( (LA16_0==23) ) {
            NSInteger LA16_1 = [input LA:2];

            if ( ((LA16_1 >= STRING && LA16_1 <= ANONYMOUS_TEMPLATE)||(LA16_1 >= T_FALSE && LA16_1 <= T_TRUE)) ) {
                alt16=1;
            }
            else if ( (LA16_1==LBRACK) ) {
                alt16=2;
            }
            else {
                NoViableAltException *nvae = [NoViableAltException newException:16 state:1 stream:input];
                nvae.c = LA16_1;
                @throw nvae;

            }
        }
        else if ( ((LA16_0 >= RPAREN && LA16_0 <= 18)) ) {
            alt16=3;
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:16 state:0 stream:input];
            nvae.c = LA16_0;
            @throw nvae;

        }
        switch (alt16) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:327:13: '=' a= ( STRING | ANONYMOUS_TEMPLATE | T_TRUE | T_FALSE ) // alt
                {

                [self match:input TokenType:23 Follow:FOLLOW_23_in_formalArg686]; 
                 

                a = (CommonToken *)[input LT:1]; /* matchSet */

                if ((([input LA:1] >= STRING) && ([input LA:1] <= ANONYMOUS_TEMPLATE))||(([input LA:1] >= T_FALSE) && ([input LA:1] <= T_TRUE))) {
                    [input consume];
                    [state setIsErrorRecovery:NO];
                } else {
                    MismatchedSetException *mse = [MismatchedSetException newException:nil stream:input];
                    @throw mse;
                }

                 

                /* scopeSetAttributeRef */((formalArgs_Scope *)[formalArgs_stack peek]).hasOptionalParameter =  YES;

                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:328:13: '=' a= LBRACK RBRACK // alt
                {

                [self match:input TokenType:23 Follow:FOLLOW_23_in_formalArg714]; 
                 
                a=(CommonToken *)[self match:input TokenType:LBRACK Follow:FOLLOW_LBRACK_in_formalArg718]; 
                 
                [self match:input TokenType:RBRACK Follow:FOLLOW_RBRACK_in_formalArg720]; 
                 

                /* scopeSetAttributeRef */((formalArgs_Scope *)[formalArgs_stack peek]).hasOptionalParameter =  YES;

                 
                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:329:13:  // alt
                {



                            if ( ((formalArgs_Scope *)[formalArgs_stack peek]).hasOptionalParameter ) {
                                [group.errMgr compileTimeError:REQUIRED_PARAMETER_AFTER_OPTIONAL templateToken:nil t:ID6];
                            }
                            

                 
                }
                break;

        }

         

        [args addObject:[FormalArgument newFormalArgument:(ID6!=nil?ID6.text:nil) token:a]];

         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end formalArg */

/*
 * $ANTLR start dictDef
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:347:1: dictDef : ID '::=' dict ;
 */
- (void) dictDef
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */
        CommonToken *ID7 = nil;

        LinkedHashMap * dict8 = nil ;



        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:348:5: ( ID '::=' dict ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:348:9: ID '::=' dict // alt
        {

        ID7=(CommonToken *)[self match:input TokenType:ID Follow:FOLLOW_ID_in_dictDef778]; 
         
        [self match:input TokenType:21 Follow:FOLLOW_21_in_dictDef780]; 
         
        /* ruleRef */
        [self pushFollow:FOLLOW_dict_in_dictDef782];
        dict8 = [self dict];

        [self popFollow];


         


                if ( [group rawGetDictionary:(ID7!=nil?ID7.text:nil)] != nil ) {
                    [group.errMgr compileTimeError:MAP_REDEFINITION templateToken:nil t:ID7];
                }
                else if ( [group rawGetTemplate:(ID7!=nil?ID7.text:nil)] != nil ) {
                    [group.errMgr compileTimeError:TEMPLATE_REDEFINITION_AS_MAP templateToken:nil t:ID7];
                }
                else {
                    [group defineDictionary:(ID7!=nil?ID7.text:nil) mapping:dict8];
                }
                

         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end dictDef */

/*
 * $ANTLR start dict
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:362:1: dict returns [LinkedHashMap *mapping] : LBRACK dictPairs[mapping] RBRACK ;
 */
- (LinkedHashMap *) dict
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    LinkedHashMap * mapping = nil ;


    mapping=[LinkedHashMap newLinkedHashMap:16];
    @try {
        /* ruleLabelDefs entry */





        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:364:5: ( LBRACK dictPairs[mapping] RBRACK ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:364:9: LBRACK dictPairs[mapping] RBRACK // alt
        {

        [self match:input TokenType:LBRACK Follow:FOLLOW_LBRACK_in_dict820]; 
         
        /* ruleRef */
        [self pushFollow:FOLLOW_dictPairs_in_dict822];
        [self dictPairs:mapping ];

        [self popFollow];


         
        [self match:input TokenType:RBRACK Follow:FOLLOW_RBRACK_in_dict825]; 
         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return mapping;
}
/* $ANTLR end dict */

/*
 * $ANTLR start dictPairs
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:367:1: dictPairs[LinkedHashMap *mapping] : ( keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )? | defaultValuePair[mapping] );
 */
- (void) dictPairs:(LinkedHashMap *)mapping 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */





        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:368:5: ( keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )? | defaultValuePair[mapping] ) //ruleblock
        NSInteger alt19=2;
        NSInteger LA19_0 = [input LA:1];

        if ( (LA19_0==STRING) ) {
            alt19=1;
        }
        else if ( (LA19_0==25) ) {
            alt19=2;
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:19 state:0 stream:input];
            nvae.c = LA19_0;
            @throw nvae;

        }
        switch (alt19) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:368:9: keyValuePair[mapping] ( ',' keyValuePair[mapping] )* ( ',' defaultValuePair[mapping] )? // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_keyValuePair_in_dictPairs845];
                [self keyValuePair:mapping ];

                [self popFollow];


                 

                do {
                    NSInteger alt17=2;
                    NSInteger LA17_0 = [input LA:1];
                    if ( (LA17_0==18) ) {
                        NSInteger LA17_1 = [input LA:2];
                        if ( (LA17_1==STRING) ) {
                            alt17=1;
                        }


                    }


                    switch (alt17) {
                        case 1 : ;
                            // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:369:10: ',' keyValuePair[mapping] // alt
                            {

                            [self match:input TokenType:18 Follow:FOLLOW_18_in_dictPairs857]; 
                             
                            /* ruleRef */
                            [self pushFollow:FOLLOW_keyValuePair_in_dictPairs859];
                            [self keyValuePair:mapping ];

                            [self popFollow];


                             
                            }
                            break;

                        default :
                            goto loop17;
                    }
                } while (YES);
                loop17: ;

                 
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:369:38: ( ',' defaultValuePair[mapping] )? // block
                NSInteger alt18=2;
                NSInteger LA18_0 = [input LA:1];

                if ( (LA18_0==18) ) {
                    alt18=1;
                }
                switch (alt18) {
                    case 1 : ;
                        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:369:39: ',' defaultValuePair[mapping] // alt
                        {

                        [self match:input TokenType:18 Follow:FOLLOW_18_in_dictPairs865]; 
                         
                        /* ruleRef */
                        [self pushFollow:FOLLOW_defaultValuePair_in_dictPairs867];
                        [self defaultValuePair:mapping ];

                        [self popFollow];


                         
                        }
                        break;

                }

                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:370:9: defaultValuePair[mapping] // alt
                {

                /* ruleRef */
                [self pushFollow:FOLLOW_defaultValuePair_in_dictPairs880];
                [self defaultValuePair:mapping ];

                [self popFollow];


                 
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {

                [self error:[NSString stringWithFormat:@"missing dictionary entry at '%@'", [input LT:1].text]];
            
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end dictPairs */

/*
 * $ANTLR start defaultValuePair
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:376:1: defaultValuePair[LinkedHashMap *mapping] : 'default' ':' keyValue ;
 */
- (void) defaultValuePair:(LinkedHashMap *)mapping 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */


        id keyValue9 = nil ;



        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:377:5: ( 'default' ':' keyValue ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:377:9: 'default' ':' keyValue // alt
        {

        [self match:input TokenType:25 Follow:FOLLOW_25_in_defaultValuePair910]; 
         
        [self match:input TokenType:20 Follow:FOLLOW_20_in_defaultValuePair912]; 
         
        /* ruleRef */
        [self pushFollow:FOLLOW_keyValue_in_defaultValuePair914];
        keyValue9 = [self keyValue];

        [self popFollow];


         

        [mapping put:STGroup.DEFAULT_KEY value:keyValue9];

         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end defaultValuePair */

/*
 * $ANTLR start keyValuePair
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:380:1: keyValuePair[LinkedHashMap *mapping] : STRING ':' keyValue ;
 */
- (void) keyValuePair:(LinkedHashMap *)mapping 
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */

    @try {
        /* ruleLabelDefs entry */
        CommonToken *STRING10 = nil;

        id keyValue11 = nil ;



        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:381:5: ( STRING ':' keyValue ) // ruleBlockSingleAlt
        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:381:9: STRING ':' keyValue // alt
        {

        STRING10=(CommonToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_keyValuePair936]; 
         
        [self match:input TokenType:20 Follow:FOLLOW_20_in_keyValuePair938]; 
         
        /* ruleRef */
        [self pushFollow:FOLLOW_keyValue_in_keyValuePair940];
        keyValue11 = [self keyValue];

        [self popFollow];


         

        [mapping put:[Misc replaceEscapes:[Misc strip:(STRING10!=nil?STRING10.text:nil) n:1]] value:keyValue11];

         
        }

        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {
        [self reportError:re];
        [self recover:input Exception:re];
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return ;
}
/* $ANTLR end keyValuePair */

/*
 * $ANTLR start keyValue
 * /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:384:1: keyValue returns [id value] : ( BIGSTRING | BIGSTRING_NO_NL | ANONYMOUS_TEMPLATE | STRING | T_FALSE | T_TRUE | LBRACK RBRACK |{...}? => ID );
 */
- (id) keyValue
{
    /* ruleScopeSetUp */

    /* ruleDeclarations */
    id value = nil ;


    @try {
        /* ruleLabelDefs entry */
        CommonToken *BIGSTRING12 = nil;
        CommonToken *BIGSTRING_NO_NL13 = nil;
        CommonToken *ANONYMOUS_TEMPLATE14 = nil;
        CommonToken *STRING15 = nil;




        // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:385:5: ( BIGSTRING | BIGSTRING_NO_NL | ANONYMOUS_TEMPLATE | STRING | T_FALSE | T_TRUE | LBRACK RBRACK |{...}? => ID ) //ruleblock
        NSInteger alt20=8;
        NSInteger LA20_0 = [input LA:1];

        if ( (LA20_0==BIGSTRING) ) {
            alt20=1;
        }
        else if ( (LA20_0==BIGSTRING_NO_NL) ) {
            alt20=2;
        }
        else if ( (LA20_0==ANONYMOUS_TEMPLATE) ) {
            alt20=3;
        }
        else if ( (LA20_0==STRING) ) {
            alt20=4;
        }
        else if ( (LA20_0==T_FALSE) ) {
            alt20=5;
        }
        else if ( (LA20_0==T_TRUE) ) {
            alt20=6;
        }
        else if ( (LA20_0==LBRACK) ) {
            alt20=7;
        }
        else if ( (LA20_0==ID) && (([[[input LT:1] text] isEqualToString:@"key"]))) {
            alt20=8;
        }
        else {
            NoViableAltException *nvae = [NoViableAltException newException:20 state:0 stream:input];
            nvae.c = LA20_0;
            @throw nvae;

        }
        switch (alt20) {
            case 1 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:385:9: BIGSTRING // alt
                {

                BIGSTRING12=(CommonToken *)[self match:input TokenType:BIGSTRING Follow:FOLLOW_BIGSTRING_in_keyValue965]; 
                 

                value =  [group createSingleton:BIGSTRING12];


                 
                }
                break;
            case 2 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:386:9: BIGSTRING_NO_NL // alt
                {

                BIGSTRING_NO_NL13=(CommonToken *)[self match:input TokenType:BIGSTRING_NO_NL Follow:FOLLOW_BIGSTRING_NO_NL_in_keyValue987]; 
                 

                value =  [group createSingleton:BIGSTRING_NO_NL13];


                 
                }
                break;
            case 3 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:387:9: ANONYMOUS_TEMPLATE // alt
                {

                ANONYMOUS_TEMPLATE14=(CommonToken *)[self match:input TokenType:ANONYMOUS_TEMPLATE Follow:FOLLOW_ANONYMOUS_TEMPLATE_in_keyValue1003]; 
                 

                value =  [group createSingleton:ANONYMOUS_TEMPLATE14];


                 
                }
                break;
            case 4 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:388:9: STRING // alt
                {

                STRING15=(CommonToken *)[self match:input TokenType:STRING Follow:FOLLOW_STRING_in_keyValue1016]; 
                 

                value =  [Misc replaceEscapes:[Misc strip:(STRING15!=nil?STRING15.text:nil) n:1]];


                 
                }
                break;
            case 5 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:389:9: T_FALSE // alt
                {

                [self match:input TokenType:T_FALSE Follow:FOLLOW_T_FALSE_in_keyValue1041]; 
                 

                value =  [ACNumber numberWithBool:NO];


                 
                }
                break;
            case 6 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:390:9: T_TRUE // alt
                {

                [self match:input TokenType:T_TRUE Follow:FOLLOW_T_TRUE_in_keyValue1065]; 
                 

                value =  [ACNumber numberWithBool:YES];


                 
                }
                break;
            case 7 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:391:9: LBRACK RBRACK // alt
                {

                [self match:input TokenType:LBRACK Follow:FOLLOW_LBRACK_in_keyValue1090]; 
                 
                [self match:input TokenType:RBRACK Follow:FOLLOW_RBRACK_in_keyValue1092]; 
                 

                value =  [AMutableDictionary dictionaryWithCapacity:5];


                 
                }
                break;
            case 8 : ;
                // /Users/acondit/source/antlr/code/stringtemplate4/objc/main/compiler/Group.g:392:29: {...}? => ID // alt
                {

                if ( !(([[[input LT:1] text] isEqualToString:@"key"])) ) {
                    @throw [FailedPredicateException newException:@"keyValue" predicate:@"[[[input LT:1] text] isEqualToString:@\"key\"]" stream:input];
                }
                 
                [self match:input TokenType:ID Follow:FOLLOW_ID_in_keyValue1134]; 
                 

                value =  STGroup.DICT_KEY;


                 
                }
                break;

        }
        /* token+rule list labels */

    }
    @catch (RecognitionException *re) {

                [self error:[NSString stringWithFormat:@"missing value for key at '%@'", [[input LT:1] text]]];
            
    }

    @finally {
        /* ruleScopeCleanUp */

    }
    return value;
}
/* $ANTLR end keyValue */
/* ObjC end rules */

@end /* end of GroupParser implementation line 692 */
